
/***************************************************************************
 *  Copyright 2019 ForgeRock AS
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 ***************************************************************************/

import java.io.ByteArrayInputStream;
import java.security.Signature;
import java.security.cert.Certificate;
import java.security.cert.CertificateFactory;

import org.apache.commons.codec.binary.Base64;

/**
 * Simple JWT processor. This is specially written for JWT generated by WSO2IS
 */
public class SignatureTest {

	private static final Base64 base64Url = new Base64(true);

	private static boolean isValid() {

		// first and second parts of jwt
		String jwtAssertion = "eyJraWQiOiJkOTdmNmFlNzg3MmM4MGZlYjVjM2Y2MWZjZDE1MjlkMjEyYmZkMWJhIiwiYWxnIjoiUlMyNTYifQ.eyJ0b2tlbl9lbmRwb2ludF9hdXRoX3NpZ25pbmdfYWxnIjoiUlMyNTYiLCJyZXF1ZXN0X29iamVjdF9lbmNyeXB0aW9uX2FsZyI6IlJTQS1PQUVQLTI1NiIsImdyYW50X3R5cGVzIjpbImF1dGhvcml6YXRpb25fY29kZSIsInJlZnJlc2hfdG9rZW4iLCJjbGllbnRfY3JlZGVudGlhbHMiXSwiaXNzIjoiNWM1MDcyYzE4ODYxMGUwMDM1YmQyOTMwIiwicmVkaXJlY3RfdXJpcyI6WyJodHRwczpcL1wvd3d3Lmdvb2dsZS5jb20iXSwidG9rZW5fZW5kcG9pbnRfYXV0aF9tZXRob2QiOiJwcml2YXRlX2tleV9qd3QiLCJzb2Z0d2FyZV9zdGF0ZW1lbnQiOiJleUpyYVdRaU9pSm1OekEyWlRRMlpXUmlNekV3WldRMU56ZGlORFptTXpObU9UTmlNelE0WVdReFpHWmtPVE5tSWl3aVlXeG5Jam9pVWxNeU5UWWlmUS5leUp2Y21kZmFuZHJjMTlsYm1Sd2IybHVkQ0k2SWxSUFJFOGlMQ0p6YjJaMGQyRnlaVjl0YjJSbElqb2lWRVZUVkNJc0luTnZablIzWVhKbFgzSmxaR2x5WldOMFgzVnlhWE1pT2xzaWFIUjBjRHBjTDF3dmFtVnVhMmx1Y3k1cGRITnRZWEowYzNsemRHVnRjeTVsZFRvNE1EZ3hYQzloY0c5c2JHOHRjMmh2Y0NJc0ltaDBkSEJ6T2x3dlhDOTNkM2N1WjI5dloyeGxMbU52YlNJc0ltaDBkSEJ6T2x3dlhDOXNiMmRwYmk1d2MyUXlZV05qWld4bGNtRjBiM0p6TG1aeWFXUmhiUzVoWldWMExXWnZjbWRsY205amF5NWpiMjFjTDI5d1pXNWhiU0pkTENKdmNtZGZjM1JoZEhWeklqb2lRV04wYVhabElpd2ljMjltZEhkaGNtVmZZMnhwWlc1MFgyNWhiV1VpT2lKSlUxTWdWRkJRSWl3aWMyOW1kSGRoY21WZlkyeHBaVzUwWDJsa0lqb2lOV00xTURjeVl6RTRPRFl4TUdVd01ETTFZbVF5T1RNd0lpd2lhWE56SWpvaVJtOXlaMlZTYjJOcklpd2ljMjltZEhkaGNtVmZZMnhwWlc1MFgyUmxjMk55YVhCMGFXOXVJam9pVkZCUUlGVnpaV1FnWm05eUlIUmxjM1JwYm1jZ2NIVnljRzl6WlhNaUxDSnpiMlowZDJGeVpWOXFkMnR6WDJWdVpIQnZhVzUwSWpvaWFIUjBjSE02WEM5Y0wzTmxjblpwWTJVdVpHbHlaV04wYjNKNUxtOWlMbVp2Y21kbGNtOWpheTVtYVc1aGJtTnBZV3c2TkRRelhDOWhjR2xjTDNOdlpuUjNZWEpsTFhOMFlYUmxiV1Z1ZEZ3dk5XTTFNRGN5WXpFNE9EWXhNR1V3TURNMVltUXlPVE13WEM5aGNIQnNhV05oZEdsdmJsd3ZhbmRyWDNWeWFTSXNJbk52Wm5SM1lYSmxYMmxrSWpvaU5XTTFNRGN5WXpFNE9EWXhNR1V3TURNMVltUXlPVE13SWl3aWIzSm5YMk52Ym5SaFkzUnpJanBiWFN3aWIySmZjbVZuYVhOMGNubGZkRzl6SWpvaWFIUjBjSE02WEM5Y0wyUnBjbVZqZEc5eWVTNXZZaTVtYjNKblpYSnZZMnN1Wm1sdVlXNWphV0ZzT2pRME0xd3ZkRzl6WEM4aUxDSnZjbWRmYVdRaU9pSTFZelV3Tm1VME5EZzROakV3WlRBd016VmlaREk1TW1ZaUxDSnpiMlowZDJGeVpWOXFkMnR6WDNKbGRtOXJaV1JmWlc1a2NHOXBiblFpT2lKVVQwUlBJaXdpYzI5bWRIZGhjbVZmY205c1pYTWlPbHNpUTBKUVNVa2lMQ0pRU1ZOUUlpd2lRVWxUVUNJc0lrUkJWRUVpWFN3aVpYaHdJam94TlRVd05qWTVNRGszTENKdmNtZGZibUZ0WlNJNkltUmhibWxsYkM1amIyMWhia0JwZEhOdFlYSjBjM2x6ZEdWdGN5NWxkU0lzSW05eVoxOXFkMnR6WDNKbGRtOXJaV1JmWlc1a2NHOXBiblFpT2lKVVQwUlBJaXdpYVdGMElqb3hOVFV3TURZME1qazNMQ0pxZEdraU9pSmlZbVJrWW1NeFppMDNNVGMzTFRRM1kySXRPV001WVMwMU9UWmxOekZrTldJd1ltSWlmUS5Jc1pMb1VJazRTNUExUVN5Nk42Vk4yQXRIaUFBOEJENXdnd2dyQkMwNUpKVzFwSFUxbmFKRWJtc21kakNFUWNfeHUxUlNtaWtfUG8tMTlicTF4aU9Xako5clpvTHNsWlpFTWYtOWNrNWxBYWJYbDlMcVkzbzdzbFRYVkNpZzlZaURkRGJzLVBoYS1ZV2RHUU9xU0pNdDJUaXRxNXRtb0NCd0RBLW5NNGtKSFNqUmY1ZTRvN1ROakpuV29Udk9Ld0ZRemZaYWk4Y3NmVkI3cmtPUGxVTEluSm11d212d1NYYmN0QTR6dEkxZGVxTFR0SE03bC1ndnM5ZTBOUFBJejVJTTcwWnROUnBYNGx4c05mdGJzSjZhYXpnZklVVy1XSkZ2OS0tV0dTXzJxbDItY2N6cXJ3ZmZDY3YwbEZES2VWbUFEVkRoV254UkJpZFM1Q21yQ3Rrc1EiLCJzY29wZSI6Im9wZW5pZCBhY2NvdW50cyBwYXltZW50cyIsInJlcXVlc3Rfb2JqZWN0X3NpZ25pbmdfYWxnIjoiUlMyNTYiLCJleHAiOjE1NTAwNjQ2MTAsInJlcXVlc3Rfb2JqZWN0X2VuY3J5cHRpb25fZW5jIjoiQTEyOENCQy1IUzI1NiIsImlhdCI6MTU1MDA2NDMwMSwianRpIjoiZmQwYjExNGItNWU3NC00ZWQ2LThhMWMtYzA2N2FiMWUzZWZjIiwicmVzcG9uc2VfdHlwZXMiOlsiY29kZSBpZF90b2tlbiJdLCJpZF90b2tlbl9zaWduZWRfcmVzcG9uc2VfYWxnIjoiUlMyNTYifQ";
		byte[] jwtSignature = null;

		// third part of JWT
		jwtSignature = base64Url.decode(
				"CvbrrEKKJddzOuVgLJVARrqP21XVZTbId6KtDOdGe0rMgjC0Mu5BR6fkn0cOJP4U9NvbI50i39EOtnxMML9wKHyoc2x-kPT6RlN5Kj0oXgM2u8bux4w_o6PvBKXZHTrraSVAB8WGXYYFZpV7RwxKOCOsq5J8rhNfAIwu83NP_Ct4C3eHc3AdU9ILXlJw_zUVFejedwtenAZLVsGAeZwzTkepuBmsiMqXAqL4vc8xkqxsC41JBJ5U7h0wTj1OK7p0z95EaPMbeF_TcPR3QyRbZmCWY19f0sM6NNM0FRpWEacpEfda0DRrS20YD0kR5v-2qZitDcSvLp9ijZDQ6a_06A"
						.getBytes());

		String signatureAlgo = "RS256";

		if ("RS256".equals(signatureAlgo)) {
			signatureAlgo = "SHA256withRSA";
		} else if ("RS515".equals(signatureAlgo)) {
			signatureAlgo = "SHA512withRSA";
		} else if ("RS384".equals(signatureAlgo)) {
			signatureAlgo = "SHA384withRSA";
		} else {
			// by default
			signatureAlgo = "SHA256withRSA";
		}

		if (jwtAssertion != null && jwtSignature != null) {
			try {
				//Certificate
				byte[] decoded = base64Url.decode(
						("MIIFZjCCBE6gAwIBAgIUC3tIOY/ST4cPczOSF3okhyagKP4wDQYJKoZIhvcNAQELBQAwezELMAkGA1UEBhMCVUsxDTALBgNVBAgTBEF2b24xEDAOBgNVBAcTB0JyaXN0b2wxEjAQBgNVBAoTCUZvcmdlUm9jazEcMBoGA1UECxMTZm9yZ2Vyb2NrLmZpbmFuY2lhbDEZMBcGA1UEAxMQb2JyaS1leHRlcm5hbC1jYTAgFw0xODAxMjIxNzEwMTJaGA8yMTE4MTIyOTE3MTAxMlowgbExITAfBgNVBAMMGDVjNTA3MmMxODg2MTBlMDAzNWJkMjkzMDEhMB8GA1UECwwYNWM1MDZlNDQ4ODYxMGUwMDM1YmQyOTJmMRIwEAYDVQQKDAlGb3JnZVJvY2sxEDAOBgNVBAcMB0JyaXN0b2wxDTALBgNVBAgMBEF2b24xCzAJBgNVBAYTAlVLMScwJQYDVQRhDB5QU0RHQi01YzUwNmU0NDg4NjEwZTAwMzViZDI5MmYwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCIaRsvbs0Twegq+PlvfJDfkINfDsI44Wb+pLYf4rsvy12rB9i/GiRhhXdikzR6tkNYmbrklCNq3ux8DWGEgpgdsSPqT1AfTHQ4ZzHanaHRbbxchmVdRMzbnPuLIAnBx0Td1BQz5zcckKywmEJ8TyCmiTarzYzzNSJFE1d75+mJS6JNYDafHpdgopH26JUNyuzHM3NSMXAhnVA3f7g6roqernLhR8r9RE3V94pSAT2pxN938m1Dnd69l/Ao2k6wHDTW6rOes/G7/Z7aGisv8d+QnBdWRhEcmbwq67I78DkXnfCodmolOUVW32zRZh8PlcpeEloxGjQVFHOsNx0Sc3DRAgMBAAGjggGnMIIBozCBygYIKwYBBQUHAQEEgb0wgbowWwYIKwYBBQUHMAKGT2h0dHBzOi8vc2VydmljZS5kaXJlY3Rvcnkub2IuZm9yZ2Vyb2NrLmZpbmFuY2lhbDo0NDMvYXBpL2RpcmVjdG9yeS9rZXlzL2p3a191cmkwWwYIKwYBBQUHMAGGT2h0dHBzOi8vc2VydmljZS5kaXJlY3Rvcnkub2IuZm9yZ2Vyb2NrLmZpbmFuY2lhbDo0NDMvYXBpL2RpcmVjdG9yeS9rZXlzL2p3a191cmkwgdMGCCsGAQUFBwEDBIHGMIHDMAgGBgQAjkYBATAJBgcEAI5GAQYDMAkGBwQAi+xJAQIwgaAGBgQAgZgnAjCBlTBqMCkGBwQAgZgnAQQMHkNhcmQgQmFzZWQgUGF5bWVudCBJbnN0cnVtZW50czAeBgcEAIGYJwEDDBNBY2NvdW50IEluZm9ybWF0aW9uMB0GBwQAgZgnAQIMElBheW1lbnQgSW5pdGlhdGlvbgwdRm9yZ2VSb2NrIEZpbmFuY2lhbCBBdXRob3JpdHkMCEZSLUFBQUFBMA0GCSqGSIb3DQEBCwUAA4IBAQAo3j42ZCw6MEj7rjyHyLvA2FcM5vD8vzn9OdnH3HsI530OGHAeAg30u6LAfR3D7Ef5RyeeY7SZppn66l3C2fame/v3LXkts9qzIIQ9TVutLTckMNtUITU3Xn5AAB0Hv803+QTBFFtsKCGkvkcHEq0mz0hNHHPpt4wq2fcdcsQuF42eNXJI7dPNmTbfE/828WE6bcb/kIrTCB+D94h8cvixXEWLclK3Os8MuZ1TIGitSL93y3qKuhknfu0mwjEHQVtW1FYsLbc17Z7gp1P1ewSJStgwH+USeO+m7JGwOVJu4kUnWvTNGa08fRyamCDauA9OVBUUd5OH/X8GLf6oDWWZ")
								.getBytes());
				System.out.println("Decoded: " + decoded);
				CertificateFactory cf = CertificateFactory.getInstance("X.509");
				Certificate certificate = cf.generateCertificate(new ByteArrayInputStream(decoded));
				Signature signature = Signature.getInstance(signatureAlgo);
				signature.initVerify(certificate);
				signature.update(jwtAssertion.getBytes());
				return signature.verify(jwtSignature);
			} catch (Exception e) {
				e.printStackTrace();
			}
		} else {
			System.err.println("Signature is null");
		}
		return false;

	}

	public static void main(String[] args) {
		System.out.println("Valid: " + isValid());
	}
}
/***************************************************************************
 *  Copyright 2019 ForgeRock AS.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 ***************************************************************************/
 
function constructPISPPolicyData(paymentIntentID, inputSub, inputPaymentInitiation){
	
	var policyData = {};
	var permission = "";
	
	policyData.name = "pisp-" + paymentIntentID;
	console.log("policyData.name: " + policyData.name);
	
	policyData.active = true;
	policyData.description = "NextGenPSD2 PISP Consent Policy - autogenerated by IDM";
	policyData.applicationName = "PISP Authorization Policy";
	policyData.actionValues = {};
	
	policyData.actionValues["POST"] = true;
	policyData.actionValues["GET"] = true;
	
	var res1 = constructIdmUri(idmServer) + "/nextgenpsd2/v1.3.2/payments/" + paymentIntentID;	
	policyData.resources = [res1];

	if (inputSub != null && inputSub != "" && inputPaymentInitiation != null && inputPaymentInitiation != "") {
		policyData.subject = {
                                "type": "AND",
				"subjects":	[
					{ "type": "JwtClaim",
					  "claimName": "sub",
					  "claimValue": inputSub
					}
				]
		};

		policyData.resourceAttributes = [
        	        { "type": "Static",
                	  "propertyName": "instructedAmount",
          	         "propertyValues": [ inputPaymentInitiation.instructedAmount + "" ]
                	},
			{ "type": "Static",
        	          "propertyName": "debtorAccount",
                	  "propertyValues": [ inputPaymentInitiation.debtorAccount + "" ]
                	},
			{ "type": "Static",
        	          "propertyName": "creditorAccount",
                	  "propertyValues": [ inputPaymentInitiation.creditorAccount + "" ]
                	},
		];
	}

	
	policyData.resourceTypeUuid = "76656a38-5f8e-401b-83aa-4ccb74ce88d2";

	console.log("[DEBUG] AM NextGenPSD2 PISP Policy Created: " + policyData.name);
	
	return policyData;
}


function constructAISPPolicyData(accountInformationConsentID, inputSub, inputAispInitiation){
	
	var policyData = {};
	var permission = "";
	
	policyData.name = "aisp-" + accountInformationConsentID;
	console.log("policyData.name: " + policyData.name);
	
	policyData.active = true;
	policyData.description = "NextGenPSD2 AISP Consent Policy - autogenerated by IDM";
	policyData.applicationName = "AISP Authorization Policy";
	policyData.actionValues = {};
	
	policyData.actionValues["POST"] = true;
	policyData.actionValues["GET"] = true;	

	var res1 = constructIdmUri(idmServer) + "/nextgenpsd2/v1.3.2/accounts/" + accountInformationConsentID;	
	policyData.resources = [res1];

	inputAccountInitiation = inputAispInitiation.accounts;

	if (inputSub != null && inputSub != "" && inputAccountInitiation != null && inputAccountInitiation != "") {

		var subjectList = [];
		var accountsList = [];
		var i;
		for (i=0; i < inputAccountInitiation.length; i++){
			var currentAccountId = inputAccountInitiation[i].accountid;
			accountsList.push(currentAccountId);
			var currentPermissions = inputAccountInitiation[i].Permissions;
			var j;
			for (j=0; j < currentPermissions.length; j++){
				var currentPermission = currentPermissions[j];
				
				var currentSubject = {}; 
				currentSubject.type = "JwtClaim";
				currentSubject.claimName = "PermissionType";
				currentSubject.claimValue = currentAccountId+":"+currentPermission;
				subjectList.push(currentSubject);
			}						
		}
		var allGrantedAccounts = {};
                allGrantedAccounts.type = "JwtClaim";
                allGrantedAccounts.claimName = "PermissionType";
                allGrantedAccounts.claimValue = "allGrantedAccounts";
                subjectList.push(allGrantedAccounts);

		policyData.subject = {
				"type": "AND",
				"subjects":	[
					{ "type": "JwtClaim",
					  "claimName": "sub",
					  "claimValue": inputSub
					},
					{
				          "type": "OR",
				          "subjects": subjectList
					}
				]
		};
	}
	
	var recurringIndicator = [];
	recurringIndicator.push(inputAispInitiation.recurringIndicator);
	var validUntil = [];
	validUntil.push(inputAispInitiation.validUntil);
	var frequencyPerDay = [];
	frequencyPerDay.push(inputAispInitiation.frequencyPerDay);
	var combinedServiceIndicator = [];
	combinedServiceIndicator.push(inputAispInitiation.combinedServiceIndicator);
	policyData.resourceAttributes = [ 
			  { "type": "Static",
             	 	    "propertyName": "grantedAccounts",
			    "propertyValues": accountsList
			  },
			  { "type": "Static",
                            "propertyName": "recurringIndicator",
                            "propertyValues": recurringIndicator
                          },
                          { "type": "Static",
                            "propertyName": "validUntil",
                            "propertyValues": validUntil
                          },
                          { "type": "Static",
                            "propertyName": "frequencyPerDay",
                            "propertyValues": frequencyPerDay
                          },
                          { "type": "Static",
                            "propertyName": "combinedServiceIndicator",
                            "propertyValues": combinedServiceIndicator
                          },
                       ];
	policyData.resourceTypeUuid = "76656a38-5f8e-401b-83aa-4ccb74ce88d2";

	console.log("[DEBUG] AM NextGenPSD2 AISP Policy Created: " + policyData.name);
	
	return policyData;
}


function constructIdmUri(idmServer){
	var uri = "";
	
	uri = idmServer.protocol + "://" + idmServer.host + ":" + idmServer.port
	
	return uri;
}
